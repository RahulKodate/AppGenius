package ui.Patient;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Doctor;
import model.DoctorDirectory;
import model.Hospital;
import model.HospitalDirectory;
import model.Patient;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author rahulkodate
 */
public class ManagePatients extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatients
     */
    private JPanel userProcessContainer;
    private PersonDirectory personDirectory;
    private HospitalDirectory hospitalDirectory;
    private DoctorDirectory doctorDirectory;

    public ManagePatients(JPanel userProcessContainer, PersonDirectory personDirectory, HospitalDirectory hospitalDirectory, DoctorDirectory doctorDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.personDirectory = personDirectory;
        this.hospitalDirectory = hospitalDirectory;
        this.doctorDirectory = doctorDirectory;

        isLetter("");
        ArrayList<Person> persons = personDirectory.getPersonDirectory();
//        ArrayList<Hospital> hospitals = hospitalDirectory.getHospitalDirectory();
//        for (Hospital x : hospitals) {
//            System.out.println(x.getName());
        ArrayList<Doctor> docs = doctorDirectory.getDoctorDirectory();
//            System.out.println("inside");
//            x.getDoctorDirectory().printDoctors();
////            System.out.println(x.getDoctorDirectory());
////            for (Doctor d : docs) {
//
////            }
//        }
        populatePatientTable(persons);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnDeletePatient = new javax.swing.JButton();
        btnViewPatient = new javax.swing.JButton();
        btnCreatePatient = new javax.swing.JButton();
        btnUpdatePatient = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        lblPatientMgmt = new javax.swing.JLabel();
        txtSearchPatient = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        btnSearchPatient = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 255));

        btnBack.setBackground(new java.awt.Color(255, 0, 0));
        btnBack.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<- Back");
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDeletePatient.setBackground(new java.awt.Color(255, 0, 0));
        btnDeletePatient.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnDeletePatient.setForeground(new java.awt.Color(255, 255, 255));
        btnDeletePatient.setText("Delete Patient");
        btnDeletePatient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePatientActionPerformed(evt);
            }
        });

        btnViewPatient.setBackground(new java.awt.Color(255, 0, 0));
        btnViewPatient.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnViewPatient.setForeground(new java.awt.Color(255, 255, 255));
        btnViewPatient.setText("View Patient");
        btnViewPatient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPatientActionPerformed(evt);
            }
        });

        btnCreatePatient.setBackground(new java.awt.Color(255, 0, 0));
        btnCreatePatient.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnCreatePatient.setForeground(new java.awt.Color(255, 255, 255));
        btnCreatePatient.setText("Create Patient");
        btnCreatePatient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCreatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePatientActionPerformed(evt);
            }
        });

        btnUpdatePatient.setBackground(new java.awt.Color(255, 0, 0));
        btnUpdatePatient.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnUpdatePatient.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdatePatient.setText("Update Patient");
        btnUpdatePatient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePatientActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblPatientMgmt.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        lblPatientMgmt.setForeground(new java.awt.Color(255, 255, 255));
        lblPatientMgmt.setText("Patient Management");

        tblPatient.setFont(new java.awt.Font("Operator Mono", 0, 12)); // NOI18N
        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Patient ID", "D.O.B", "Age", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatient);

        btnSearchPatient.setBackground(new java.awt.Color(255, 0, 0));
        btnSearchPatient.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnSearchPatient.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchPatient.setText("Search Patient by Community");
        btnSearchPatient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPatientActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(255, 0, 0));
        btnRefresh.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Refresh Table");
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(btnRefresh))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(249, 249, 249)
                        .addComponent(lblPatientMgmt))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(92, 92, 92)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnDeletePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnUpdatePatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnViewPatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnCreatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtSearchPatient, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                                .addComponent(btnSearchPatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(46, 46, 46))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientMgmt)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(btnCreatePatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnViewPatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdatePatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeletePatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator2)))
                        .addGap(97, 97, 97))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(txtSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearchPatient)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
  }//GEN-LAST:event_btnBackActionPerformed

  private void btnDeletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePatientActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatient.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table above!",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person p = (Person) tblPatient.getValueAt(selectedRow, 0);

        Patient patient = p.getPatient();

        if (patient == null) {
            JOptionPane.showMessageDialog(this, "Patient not created. Cannot delete",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int confirmation = JOptionPane.showConfirmDialog(this,
                "Are you sure want to remove this entry?",
                "Warning", JOptionPane.YES_NO_OPTION);
        if (confirmation == 0) {
            p.setPatient(null);
            populatePatientTable(personDirectory.getPersonDirectory());
        }
  }//GEN-LAST:event_btnDeletePatientActionPerformed

  private void btnViewPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPatientActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatient.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                    "Please select a row from table above!",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Person p = (Person) tblPatient.getValueAt(selectedRow, 0);

        Patient patient = p.getPatient();
        if (patient != null) {
            ViewPatientDetails vpd = new ViewPatientDetails(userProcessContainer,
                    patient,
                    Boolean.FALSE);
            userProcessContainer.add("ViewPatientDetails", vpd);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(this, "Patient not created, "
                    + "Please create Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
  }//GEN-LAST:event_btnViewPatientActionPerformed

  private void btnCreatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePatientActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblPatient.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                    "Please select a person from table above to make them a patient!",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
//        HospitalDirectory hospitalDirectory = new HospitalDirectory();
        Person person = (Person) tblPatient.getValueAt(selectedRow, 0);
        ArrayList<Hospital> hospitals = hospitalDirectory.getCommunityHospitalDirectory(person.getCommunity().getCommunityName());
        ArrayList<Doctor> doctors = doctorDirectory.getDoctorDirectory();
//        ArrayList<Doctor> doctors = new ArrayList<>();
//        for (Hospital hos : hospitals) {
//            DoctorDirectory d = hos.getDoctorDirectory();
//            d.printDoctors();
//        }

        if (person.getPatient() == null) {
            CreatePatient cp = new CreatePatient(userProcessContainer,
                    person, hospitals, doctors);
            userProcessContainer.add("CreatePersonJPanel", cp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(this, "Paient already exists.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

  }//GEN-LAST:event_btnCreatePatientActionPerformed

  private void btnUpdatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePatientActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatient.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table above!",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Person p = (Person) tblPatient.getValueAt(selectedRow, 0);

        Patient patient = p.getPatient();

        if (patient != null) {
            ViewPatientDetails upd = new ViewPatientDetails(userProcessContainer,
                    patient, Boolean.TRUE);
            userProcessContainer.add("UpdatePersonJPanel", upd);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(this, "Patient not created, "
                    + "Please create Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
  }//GEN-LAST:event_btnUpdatePatientActionPerformed

  private void btnSearchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPatientActionPerformed
        // TODO add your handling code here:
        String searchStr = txtSearchPatient.getText();
        if (searchStr.length() == 0 || !isLetter(searchStr)) {
            JOptionPane.showMessageDialog(this, "Please enter a valid community to search!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ArrayList<Person> searchPatients;
        searchPatients = personDirectory.searchPatient(searchStr);
        populatePatientTable(searchPatients);
  }//GEN-LAST:event_btnSearchPatientActionPerformed

  private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        txtSearchPatient.setText("");
        populatePatientTable(personDirectory.getPersonDirectory());
  }//GEN-LAST:event_btnRefreshActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreatePatient;
    private javax.swing.JButton btnDeletePatient;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearchPatient;
    private javax.swing.JButton btnUpdatePatient;
    private javax.swing.JButton btnViewPatient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblPatientMgmt;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtSearchPatient;
    // End of variables declaration//GEN-END:variables

    private void populatePatientTable(ArrayList<Person> persons) {
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);

        if (persons.isEmpty()) {
            JOptionPane.
                    showMessageDialog(this, "No patients found! Please add a patient ID!",
                            "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        for (Person p : persons) {
            Object[] row = new Object[5];
            row[0] = p;
            row[2] = p.getDob();
            row[3] = p.getAge();
            row[4] = p.getCommunity().getCommunityName();

            if (p.getPatient() != null) {
                row[1] = p.getPatient().getPatientID();
            } else {
                row[1] = "Patient not created.";
            }
            model.addRow(row);
        }
    }

    private boolean isLetter(String s) {
        char[] chArr = s.toCharArray();
        for (char c : chArr) {
            if (!Character.isLetter(c)) {
                return false;
            }
        }
        return true;
    }
}
