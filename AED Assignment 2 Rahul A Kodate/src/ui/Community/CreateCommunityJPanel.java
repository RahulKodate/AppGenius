package ui.Community;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.City;
import model.CityDirectory;
import model.Community;
import model.CommunityDirectory;
import model.HospitalDirectory;
import model.House;
import model.HouseDirectory;

/**
 *
 * @author rahulkodate
 */
public class CreateCommunityJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateCommunityJPanel
     */
    private JPanel userProcessContainer;
    private CommunityDirectory communityDirectory;
    private HospitalDirectory hospitalDirectory;
    private HouseDirectory houseDirectory;
    private CityDirectory cityDirectory;

    public CreateCommunityJPanel(JPanel userProcessContainer, CommunityDirectory communityDirectory, HouseDirectory houseDirectory, CityDirectory cityDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.communityDirectory = communityDirectory;
        this.houseDirectory = houseDirectory;
        this.cityDirectory = cityDirectory;
        isDigit("");
        isLetter("");
        setSize(1000, 610);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCreatePerson = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblFName = new javax.swing.JLabel();
        lblLName = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtHouse = new javax.swing.JTextField();
        btnCreateCommunity = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 255));

        lblCreatePerson.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        lblCreatePerson.setForeground(new java.awt.Color(255, 255, 255));
        lblCreatePerson.setText("Create Community Profile");

        btnBack.setBackground(new java.awt.Color(255, 0, 0));
        btnBack.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<- Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblFName.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        lblFName.setForeground(new java.awt.Color(255, 255, 255));
        lblFName.setText("Name");

        lblLName.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        lblLName.setForeground(new java.awt.Color(255, 255, 255));
        lblLName.setText("House");

        lblAge.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        lblAge.setForeground(new java.awt.Color(255, 255, 255));
        lblAge.setText("City");

        txtName.setFont(new java.awt.Font("Operator Mono", 0, 13)); // NOI18N
        txtName.setToolTipText("");

        txtCity.setFont(new java.awt.Font("Operator Mono", 0, 13)); // NOI18N

        txtHouse.setFont(new java.awt.Font("Operator Mono", 0, 13)); // NOI18N

        btnCreateCommunity.setBackground(new java.awt.Color(255, 0, 0));
        btnCreateCommunity.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnCreateCommunity.setForeground(new java.awt.Color(255, 255, 255));
        btnCreateCommunity.setText("Create Community");
        btnCreateCommunity.setToolTipText("");
        btnCreateCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCommunityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAge, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblFName, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtHouse, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(txtName)
                    .addComponent(txtCity))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(btnBack)
                        .addGap(180, 180, 180)
                        .addComponent(lblCreatePerson))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(415, 415, 415)
                        .addComponent(btnCreateCommunity)))
                .addContainerGap(329, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCreatePerson)
                    .addComponent(btnBack))
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLName)
                    .addComponent(txtHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                .addComponent(btnCreateCommunity)
                .addGap(117, 117, 117))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
  }//GEN-LAST:event_btnBackActionPerformed

  private void btnCreateCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCommunityActionPerformed
        // TODO add your handling code here:
        if (checkIsEmpty() == true) {
            Community community = communityDirectory.AddCommunity();
            House house = houseDirectory.AddHouse();
            City city = cityDirectory.AddCity();
            city.setCityName(txtCity.getText());
            house.setName(txtHouse.getText());
            community.setCommunityName(txtName.getText());
            community.setHouse(house);

            community.setCity(city);
//            community.setDepartment(txtDepartment.getText());
//            hospital.setName(txtHospital.getText());
//            hospital.setCommunityDirectory(communityDirectory);
//            community.setHospital(hospital);

//            hospital.getCommunityDirectory().printCommunitys();
//            System.out.println(d.);
//            community.setHospital(hospital);
            JOptionPane.showMessageDialog(this, "Successfully added a new community!", "Update",
                    JOptionPane.INFORMATION_MESSAGE);
            clearInput();
        } else {
            JOptionPane.showMessageDialog(this, "Please enter valid values in respective fields!",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
  }//GEN-LAST:event_btnCreateCommunityActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreateCommunity;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCreatePerson;
    private javax.swing.JLabel lblFName;
    private javax.swing.JLabel lblLName;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtHouse;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private Boolean checkIsEmpty() {
        if (txtName.getText().
                length() == 0 || txtHouse.getText().
                        length() == 0 || txtCity.getText().
                        length() == 0 //                || txtDepartment.getText().
                //                        length() == 0 || txtHospital.getText().
                ) {
            return false;
        } else if ((!isLetter(txtName.getText()))
                || (!isLetter(txtHouse.getText()))
                //                || (!isLetter(txtDepartment.getText()))
                //                || (!isLetter(txtHospital.getText()))
                || (!isLetter(txtCity.getText()))) {
            return false;
        }
        return true;
    }

    private void clearInput() {
        txtName.setText("");
        txtHouse.setText("");
        txtCity.setText("");
//        txtDepartment.setText("");
//        txtHospital.setText("");

    }

    private boolean isDigit(String s) {
        char[] chArr = s.toCharArray();
        for (char c : chArr) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    private boolean isLetter(String s) {
        char[] chArr = s.toCharArray();
        for (char c : chArr) {
            if (!Character.isLetter(c)) {
                return false;
            }
        }
        return true;
    }
}
