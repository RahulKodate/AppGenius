package ui.Person;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Community;
import model.House;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author rahulkodate
 */
public class CreatePersonJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreatePersonJPanel
     */
    private ArrayList<House> houseList;
    private JPanel userProcessContainer;
    private PersonDirectory personDirectory;

    public CreatePersonJPanel(JPanel userProcessContainer, PersonDirectory personDirectory, ArrayList<Community> community, ArrayList<House> house) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.personDirectory = personDirectory;
        this.houseList = house;

        isDigit("");
        isLetter("");
        setSize(1000, 610);
        populateCommunityTable(community);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCreatePerson = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblFName = new javax.swing.JLabel();
        lblLName = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        txtFName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtLName = new javax.swing.JTextField();
        btnCreatePerson = new javax.swing.JButton();
        spnDate = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCommunity = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHouse = new javax.swing.JTable();
        btnHouse = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 255));

        lblCreatePerson.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        lblCreatePerson.setForeground(new java.awt.Color(255, 255, 255));
        lblCreatePerson.setText("Create Person Profile");

        btnBack.setBackground(new java.awt.Color(255, 0, 0));
        btnBack.setFont(new java.awt.Font("Operator Mono", 1, 13)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<- Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblFName.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        lblFName.setForeground(new java.awt.Color(255, 255, 255));
        lblFName.setText("First Name");

        lblLName.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        lblLName.setForeground(new java.awt.Color(255, 255, 255));
        lblLName.setText("Last Name");

        lblAge.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        lblAge.setForeground(new java.awt.Color(255, 255, 255));
        lblAge.setText("Age");

        lblDOB.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        lblDOB.setForeground(new java.awt.Color(255, 255, 255));
        lblDOB.setText("Date of Birth");

        txtFName.setFont(new java.awt.Font("Operator Mono", 0, 13)); // NOI18N

        txtAge.setFont(new java.awt.Font("Operator Mono", 0, 13)); // NOI18N

        txtLName.setFont(new java.awt.Font("Operator Mono", 0, 13)); // NOI18N

        btnCreatePerson.setBackground(new java.awt.Color(255, 0, 0));
        btnCreatePerson.setFont(new java.awt.Font("Operator Mono", 1, 13)); // NOI18N
        btnCreatePerson.setForeground(new java.awt.Color(255, 255, 255));
        btnCreatePerson.setText("Create Person");
        btnCreatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePersonActionPerformed(evt);
            }
        });

        spnDate.setFont(new java.awt.Font("Operator Mono", 0, 13)); // NOI18N
        spnDate.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(-599598060000L), new java.util.Date(), java.util.Calendar.DAY_OF_MONTH));

        tblCommunity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Community Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCommunity);

        tblHouse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "House Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblHouse);

        btnHouse.setBackground(new java.awt.Color(255, 0, 0));
        btnHouse.setFont(new java.awt.Font("Georgia", 0, 13)); // NOI18N
        btnHouse.setForeground(new java.awt.Color(255, 255, 255));
        btnHouse.setText("View House");
        btnHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHouseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(500, 500, 500)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblDOB)
                                        .addComponent(lblAge, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblLName, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblFName, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(btnHouse)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addComponent(btnBack)
                                .addGap(210, 210, 210)
                                .addComponent(lblCreatePerson))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(418, 418, 418)
                                .addComponent(btnCreatePerson)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtLName, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                        .addComponent(txtFName)
                        .addComponent(txtAge)
                        .addComponent(spnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                .addGap(8, 8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCreatePerson)
                    .addComponent(btnBack))
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFName)
                    .addComponent(txtFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLName)
                    .addComponent(txtLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDOB)
                    .addComponent(spnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(btnHouse)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreatePerson)
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
  }//GEN-LAST:event_btnBackActionPerformed

  private void btnCreatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePersonActionPerformed
        // TODO add your handling code here:
        if (checkIsEmpty() == true) {
            Person person = personDirectory.AddPerson();
//      Community community = new Community();
//      House house = new House();
//      City city = new City();
            person.setFirstName(txtFName.getText());
            person.setLastName(txtLName.getText());
            person.setAge(Integer.parseInt(txtAge.getText()));
            person.setDob(spnDate.getValue().toString());
//      community.setCommunityName(txtCommunity.getText());
//      house.setAddress(txtHouse.getText());
//      city.setCityName(txtCity.getText());
//      person.setCity(city);

            int selectedRow = tblCommunity.getSelectedRow();
            int selectedRowHouse = tblHouse.getSelectedRow();
            Community community = (Community) tblCommunity.getValueAt(selectedRow, 0);
            House house = (House) tblHouse.getValueAt(selectedRowHouse, 0);
            person.setHouse(house);
            person.setCommunity(community);

            JOptionPane.showMessageDialog(this, "Successfully added a new person!", "Update",
                    JOptionPane.INFORMATION_MESSAGE);
            clearInput();
        } else {
            JOptionPane.showMessageDialog(this, "Please enter valid values in respective fields!",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
  }//GEN-LAST:event_btnCreatePersonActionPerformed

    private void btnHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHouseActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCommunity.getSelectedRow();
//        if (selectedRow < 0) {
//            JOptionPane.showMessageDialog(this,
//                    "Please select a Hospital from table above to make them a patient!",
//                    "Error", JOptionPane.INFORMATION_MESSAGE);
//            return;
//        }
//        HospitalDirectory hospitalDirectory = new HospitalDirectory();
        Community communities = (Community) tblCommunity.getValueAt(selectedRow, 0);
        System.out.println(communities.getCommunityName());

//        DoctorDirectory newDoc = (DoctorDirectory) (doctorDirectory.getDoctorDirectory());
        ArrayList<House> commHouse = new ArrayList<>();
//        ArrayList<Doctor> doctors = doctorDirectory.getHospitalDoctorDirectory(hospital.getName());
        for (House hou : houseList) {
            System.out.println("yo");
            if (hou.getName().equals(communities.getHouse().getName())) {
                commHouse.add(hou);
            }

        }
        populateHouseTable(commHouse);
    }//GEN-LAST:event_btnHouseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreatePerson;
    private javax.swing.JButton btnHouse;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCreatePerson;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblFName;
    private javax.swing.JLabel lblLName;
    private javax.swing.JSpinner spnDate;
    private javax.swing.JTable tblCommunity;
    private javax.swing.JTable tblHouse;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtFName;
    private javax.swing.JTextField txtLName;
    // End of variables declaration//GEN-END:variables

//    private void btnHousesActionPerformed(java.awt.event.ActionEvent evt) {
//        // TODO add your handling code here:
//
//    }
    private void populateHouseTable(ArrayList<House> house) {
        DefaultTableModel model = (DefaultTableModel) tblHouse.getModel();
        model.setRowCount(0);

        if (house.isEmpty()) {
            JOptionPane.
                    showMessageDialog(this, "No Houses found! Please add a house to community!",
                            "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        for (House p : house) {
            Object[] row = new Object[1];
            row[0] = p;

//            if (p.getName() != null) {
//                row[1] = p.getName();
//            } else {
//                row[1] = "Hospital not created.";
//            }
            model.addRow(row);
        }
    }

    private void populateCommunityTable(ArrayList<Community> community) {
        DefaultTableModel model = (DefaultTableModel) tblCommunity.getModel();
        model.setRowCount(0);

        if (community.isEmpty()) {
            JOptionPane.
                    showMessageDialog(this, "No hospitals found! Please add a hospital to community!",
                            "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        for (Community p : community) {
            Object[] row = new Object[1];
            row[0] = p;

//            if (p.getName() != null) {
//                row[1] = p.getName();
//            } else {
//                row[1] = "Hospital not created.";
//            }
            model.addRow(row);
        }

    }

    private Boolean checkIsEmpty() {
        if (txtFName.getText().
                length() == 0 || txtLName.getText().
                        length() == 0 || txtAge.getText().
                        length() == 0 //                || txtCity.getText().
                //                        length() == 0 || txtCommunity.getText().
                //                        length() == 0 || txtHouse.getText().
                //                        length() == 0
                ) {
            return false;
        } else if ((!isLetter(txtFName.getText()))
                || (!isLetter(txtLName.getText()))
                //                || (!isLetter(txtCity.getText()))
                //                || (!isLetter(txtCommunity.getText())) || (!isLetter(txtHouse.getText()))
                || (!isDigit(txtAge.getText()))) {
            return false;
        }
        return true;
    }

    private void clearInput() {
        txtFName.setText("");
        txtLName.setText("");
        txtAge.setText("");
//        txtCity.setText("");
//        txtHouse.setText("");
//        txtCommunity.setText("");
    }

    private boolean isDigit(String s) {
        char[] chArr = s.toCharArray();
        for (char c : chArr) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    private boolean isLetter(String s) {
        char[] chArr = s.toCharArray();
        for (char c : chArr) {
            if (!Character.isLetter(c)) {
                return false;
            }
        }
        return true;
    }
}
