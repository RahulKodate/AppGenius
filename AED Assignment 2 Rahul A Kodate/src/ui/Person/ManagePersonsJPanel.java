package ui.Person;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Community;
import model.CommunityDirectory;
import model.House;
import model.HouseDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author rahulkodate
 */
public class ManagePersonsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PersonDirectory
     */
    private ArrayList<Community> community;
    private JPanel userProcessContainer;
    private PersonDirectory personDirectory;
    private CommunityDirectory communityDirectory;
    private HouseDirectory houseDirectory;

    public ManagePersonsJPanel(JPanel userProcessContainer,
            PersonDirectory personDirectory, CommunityDirectory communityDirectory, HouseDirectory houseDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.personDirectory = personDirectory;
        this.communityDirectory = communityDirectory;
        this.houseDirectory = houseDirectory;
        isDigit("");
        isLetter("");
        ArrayList<Person> persons = personDirectory.getPersonDirectory();
//        ArrayList<Community> community = communityDirectory.getCommunityDirectory();
        populatePersonsTable(persons);
        setSize(1000, 610);
    }

    private void populatePersonsTable(ArrayList<Person> personList) {
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        model.setRowCount(0);

        if (personList.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "No persons found! Please add a person!", "Warning",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        for (Person p : personList) {
            Object[] row = new Object[6];
            row[0] = p;
            row[1] = p.getAge();
            row[2] = p.getDob();
            row[3] = p.getCommunity().
                    getCommunityName();
            row[4] = p.getHouse().
                    getAddress();

            if (p.getPatient() != null) {
                row[5] = p.getPatient().
                        getPatientID();
            } else {
                row[5] = "Not a Patient";
            }
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPersonMgmt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPerson = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnDeletePerson = new javax.swing.JButton();
        btnViewPerson = new javax.swing.JButton();
        btnCreatePerson = new javax.swing.JButton();
        btnUpdatePerson = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        txtSearchPerson = new javax.swing.JTextField();
        btnSearchPerson = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 255));

        lblPersonMgmt.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        lblPersonMgmt.setForeground(new java.awt.Color(255, 255, 255));
        lblPersonMgmt.setText("Person Management");

        tblPerson.setFont(new java.awt.Font("Operator Mono", 0, 12)); // NOI18N
        tblPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Age", "D.O.B", "Community", "House", "Patient ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPerson);

        btnRefresh.setBackground(new java.awt.Color(255, 0, 0));
        btnRefresh.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Refresh Table");
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(255, 0, 0));
        btnBack.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<- Back");
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDeletePerson.setBackground(new java.awt.Color(255, 0, 0));
        btnDeletePerson.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnDeletePerson.setForeground(new java.awt.Color(255, 255, 255));
        btnDeletePerson.setText("Delete Person");
        btnDeletePerson.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonActionPerformed(evt);
            }
        });

        btnViewPerson.setBackground(new java.awt.Color(255, 0, 0));
        btnViewPerson.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnViewPerson.setForeground(new java.awt.Color(255, 255, 255));
        btnViewPerson.setText("View Person");
        btnViewPerson.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPersonActionPerformed(evt);
            }
        });

        btnCreatePerson.setBackground(new java.awt.Color(255, 0, 0));
        btnCreatePerson.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnCreatePerson.setForeground(new java.awt.Color(255, 255, 255));
        btnCreatePerson.setText("Create Person");
        btnCreatePerson.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCreatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePersonActionPerformed(evt);
            }
        });

        btnUpdatePerson.setBackground(new java.awt.Color(255, 0, 0));
        btnUpdatePerson.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnUpdatePerson.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdatePerson.setText("Update Person");
        btnUpdatePerson.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePersonActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        txtSearchPerson.setFont(new java.awt.Font("Operator Mono", 0, 13)); // NOI18N

        btnSearchPerson.setBackground(new java.awt.Color(255, 0, 0));
        btnSearchPerson.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnSearchPerson.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchPerson.setText("Search Person by Name");
        btnSearchPerson.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearchPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPersonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(btnRefresh))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(209, 209, 209)
                        .addComponent(lblPersonMgmt))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(92, 92, 92)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnDeletePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnUpdatePerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnViewPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnCreatePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtSearchPerson, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                                .addComponent(btnSearchPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(46, 46, 46))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPersonMgmt)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(btnCreatePerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnViewPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdatePerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeletePerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator2)))
                        .addGap(97, 97, 97))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(txtSearchPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearchPerson)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
  }//GEN-LAST:event_btnBackActionPerformed

  private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        txtSearchPerson.setText("");
        populatePersonsTable(personDirectory.getPersonDirectory());
  }//GEN-LAST:event_btnRefreshActionPerformed

  private void btnDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePersonActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPerson.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table above!",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person p = (Person) tblPerson.getValueAt(selectedRow, 0);
        int confirmation = JOptionPane.showConfirmDialog(this,
                "Are you sure want to remove this entry?",
                "Warning", JOptionPane.YES_NO_OPTION);
        if (confirmation == 0) {
            personDirectory.deletePerson(p);
            populatePersonsTable(personDirectory.getPersonDirectory());
        }
  }//GEN-LAST:event_btnDeletePersonActionPerformed

  private void btnCreatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePersonActionPerformed
        // TODO add your handling code here:
//        ArrayList<Hospital> hospitals = hospitalDirectory.getCommunityHospitalDirectory(person.getCommunity().getCommunityName());
        ArrayList<Community> community = communityDirectory.getCommunityDirectory();
        ArrayList<House> house = houseDirectory.getHouseDirectory();
//        houseDirectory.printHouse(houseDirectory);
        for (House h : house) {
            System.out.println("house");
            System.out.println(h.getName());

        }
        CreatePersonJPanel cp = new CreatePersonJPanel(userProcessContainer,
                personDirectory, community, house);
        userProcessContainer.add("CreatePersonJPanel", cp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
  }//GEN-LAST:event_btnCreatePersonActionPerformed

  private void btnViewPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPersonActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPerson.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                    "Please select a row from table above!",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Person person = (Person) tblPerson.getValueAt(selectedRow, 0);

        ViewPersonJPanel vp = new ViewPersonJPanel(userProcessContainer, person,
                Boolean.FALSE);
        userProcessContainer.add("ViewPersonJPanel", vp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
  }//GEN-LAST:event_btnViewPersonActionPerformed

  private void btnUpdatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePersonActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPerson.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table above!",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Person person = (Person) tblPerson.getValueAt(selectedRow, 0);

        ViewPersonJPanel up = new ViewPersonJPanel(userProcessContainer, person, Boolean.TRUE);
        userProcessContainer.add("UpdatePersonJPanel", up);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
  }//GEN-LAST:event_btnUpdatePersonActionPerformed

  private void btnSearchPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPersonActionPerformed
        // TODO add your handling code here:
        String searchStr = txtSearchPerson.getText();
        if (searchStr.length() == 0 || (!isLetter(searchStr))) {
            JOptionPane.showMessageDialog(this, "Please enter a valid name to search!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ArrayList<Person> searchPersons;
        searchPersons = personDirectory.searchPerson(searchStr);
        populatePersonsTable(searchPersons);
  }//GEN-LAST:event_btnSearchPersonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreatePerson;
    private javax.swing.JButton btnDeletePerson;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearchPerson;
    private javax.swing.JButton btnUpdatePerson;
    private javax.swing.JButton btnViewPerson;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblPersonMgmt;
    private javax.swing.JTable tblPerson;
    private javax.swing.JTextField txtSearchPerson;
    // End of variables declaration//GEN-END:variables

    private boolean isDigit(String s) {
        char[] chArr = s.toCharArray();
        for (char c : chArr) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    private boolean isLetter(String s) {
        char[] chArr = s.toCharArray();
        for (char c : chArr) {
            if (!Character.isLetter(c)) {
                return false;
            }
        }
        return true;
    }
}
