package ui.Doctor;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.Person;
import model.PersonDirectory;
import model.VitalSigns;

/**
 *
 * @author rahulkodate
 */
public class ManageVitalSign extends javax.swing.JPanel {

    /**
     * Creates new form ManageVitalSign
     */
    private JPanel userProcessContainer;
    private PersonDirectory personDirectory;
    private ArrayList<Person> personList;
    private String doctor;

    public ManageVitalSign(JPanel userProcessContainer, ArrayList<Person> personList, String doctor, PersonDirectory personDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.personList = personList;
        this.doctor = doctor;
        this.personDirectory = personDirectory;

        isLetter("");

        ArrayList<Person> persons = personDirectory.getPersonDirectory();
        populatePatientsTable(personList, doctor);
        populateEncountersTable(null);
        populateAbnormalTable(new ArrayList<>(), null);
        populateCommunities(persons);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLanding = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatients = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEncounterHistory = new javax.swing.JTable();
        lblLanding1 = new javax.swing.JLabel();
        lblLanding2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAbnormal = new javax.swing.JTable();
        cbAbnormal = new javax.swing.JComboBox<>();
        btnSearchAbnormal = new javax.swing.JButton();
        lblLanding3 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnAddVitals = new javax.swing.JButton();
        btnViewEncounters = new javax.swing.JButton();
        btnSearchComm = new javax.swing.JButton();
        btnRefreshPatients = new javax.swing.JButton();
        txtCommSearch = new javax.swing.JTextField();
        btnRefreshEncounter = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnViewEncounterDetails = new javax.swing.JButton();
        btnDeleteEncounter = new javax.swing.JButton();
        btnEditEncounter = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 255));

        lblLanding.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        lblLanding.setForeground(new java.awt.Color(255, 255, 255));
        lblLanding.setText("Encounters & Vitals");

        tblPatients.setFont(new java.awt.Font("Operator Mono", 0, 12)); // NOI18N
        tblPatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Age", "Patient ID", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatients);

        tblEncounterHistory.setFont(new java.awt.Font("Operator Mono", 0, 12)); // NOI18N
        tblEncounterHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "Status"
            }
        ));
        jScrollPane2.setViewportView(tblEncounterHistory);

        lblLanding1.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        lblLanding1.setForeground(new java.awt.Color(255, 255, 255));
        lblLanding1.setText("Patients");

        lblLanding2.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        lblLanding2.setForeground(new java.awt.Color(255, 255, 255));
        lblLanding2.setText("Encounter History");

        tblAbnormal.setFont(new java.awt.Font("Operator Mono", 0, 12)); // NOI18N
        tblAbnormal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Community", "Status"
            }
        ));
        jScrollPane3.setViewportView(tblAbnormal);

        cbAbnormal.setFont(new java.awt.Font("Operator Mono", 1, 13)); // NOI18N
        cbAbnormal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        btnSearchAbnormal.setBackground(new java.awt.Color(255, 0, 0));
        btnSearchAbnormal.setFont(new java.awt.Font("Operator Mono", 1, 13)); // NOI18N
        btnSearchAbnormal.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchAbnormal.setText("Search");
        btnSearchAbnormal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearchAbnormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchAbnormalActionPerformed(evt);
            }
        });

        lblLanding3.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        lblLanding3.setForeground(new java.awt.Color(255, 255, 255));
        lblLanding3.setText("Search for Abnormal");

        btnBack.setBackground(new java.awt.Color(255, 0, 0));
        btnBack.setFont(new java.awt.Font("Operator Mono", 1, 13)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<- Back");
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnAddVitals.setBackground(new java.awt.Color(255, 0, 0));
        btnAddVitals.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnAddVitals.setForeground(new java.awt.Color(255, 255, 255));
        btnAddVitals.setText("Add Vitals");
        btnAddVitals.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalsActionPerformed(evt);
            }
        });

        btnViewEncounters.setBackground(new java.awt.Color(255, 0, 0));
        btnViewEncounters.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnViewEncounters.setForeground(new java.awt.Color(255, 255, 255));
        btnViewEncounters.setText("Encounters");
        btnViewEncounters.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewEncounters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewEncountersActionPerformed(evt);
            }
        });

        btnSearchComm.setBackground(new java.awt.Color(255, 0, 0));
        btnSearchComm.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnSearchComm.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchComm.setText("Search Community");
        btnSearchComm.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearchComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCommActionPerformed(evt);
            }
        });

        btnRefreshPatients.setBackground(new java.awt.Color(255, 0, 0));
        btnRefreshPatients.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnRefreshPatients.setForeground(new java.awt.Color(255, 255, 255));
        btnRefreshPatients.setText("Refresh");
        btnRefreshPatients.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefreshPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshPatientsActionPerformed(evt);
            }
        });

        txtCommSearch.setFont(new java.awt.Font("Operator Mono", 0, 13)); // NOI18N

        btnRefreshEncounter.setBackground(new java.awt.Color(255, 0, 0));
        btnRefreshEncounter.setFont(new java.awt.Font("Operator Mono", 1, 13)); // NOI18N
        btnRefreshEncounter.setForeground(new java.awt.Color(255, 255, 255));
        btnRefreshEncounter.setText("Refresh");
        btnRefreshEncounter.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefreshEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshEncounterActionPerformed(evt);
            }
        });

        btnViewEncounterDetails.setBackground(new java.awt.Color(255, 0, 0));
        btnViewEncounterDetails.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnViewEncounterDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnViewEncounterDetails.setText("View");
        btnViewEncounterDetails.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewEncounterDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewEncounterDetailsActionPerformed(evt);
            }
        });

        btnDeleteEncounter.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteEncounter.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnDeleteEncounter.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteEncounter.setText("Delete");
        btnDeleteEncounter.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeleteEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteEncounterActionPerformed(evt);
            }
        });

        btnEditEncounter.setBackground(new java.awt.Color(255, 0, 0));
        btnEditEncounter.setFont(new java.awt.Font("Georgia", 1, 13)); // NOI18N
        btnEditEncounter.setForeground(new java.awt.Color(255, 255, 255));
        btnEditEncounter.setText("Edit");
        btnEditEncounter.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditEncounterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblLanding3)
                                        .addGap(99, 99, 99))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnSearchAbnormal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbAbnormal, 0, 185, Short.MAX_VALUE))
                                        .addGap(120, 120, 120))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(lblLanding1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCommSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSearchComm)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnRefreshPatients))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAddVitals, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnViewEncounters, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 223, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnViewEncounterDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnEditEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnDeleteEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblLanding2)
                                        .addGap(62, 62, 62)
                                        .addComponent(btnRefreshEncounter)
                                        .addGap(2, 2, 2)))))
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblLanding)
                        .addGap(349, 349, 349))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLanding)
                    .addComponent(btnBack))
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRefreshPatients)
                    .addComponent(btnRefreshEncounter)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblLanding1)
                        .addComponent(btnSearchComm)
                        .addComponent(txtCommSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblLanding2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVitals)
                    .addComponent(btnViewEncounters)
                    .addComponent(btnViewEncounterDetails)
                    .addComponent(btnDeleteEncounter)
                    .addComponent(btnEditEncounter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLanding3)
                        .addGap(35, 35, 35)
                        .addComponent(cbAbnormal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearchAbnormal)))
                .addGap(65, 65, 65))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
  }//GEN-LAST:event_btnBackActionPerformed

  private void btnSearchCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCommActionPerformed
        // TODO add your handling code here:
        String searchStr = txtCommSearch.getText().trim();
        if (searchStr.length() == 0 || !isLetter(searchStr)) {
            JOptionPane.showMessageDialog(this, "Please enter a search term!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ArrayList<Person> searchPatients = personDirectory.searchPatient(searchStr);
        populatePatientsTable(searchPatients, doctor);
  }//GEN-LAST:event_btnSearchCommActionPerformed

  private void btnDeleteEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteEncounterActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatients.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.");
            return;
        }
        Person person = (Person) tblPatients.getValueAt(selectedRow, 0);
        Patient patient = person.getPatient();
        if (patient == null) {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create"
                    + " Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        selectedRow = tblEncounterHistory.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        VitalSigns vitalSign = (VitalSigns) tblEncounterHistory.getValueAt(selectedRow, 0);

        int flag = JOptionPane.showConfirmDialog(this, "Are you sure want to remove?",
                "Warning", JOptionPane.YES_NO_OPTION);
        if (flag == 0) {
            patient.getVitalSignsHistory().deleteVitalSigns(vitalSign);
            refreshEncounters();
        }
  }//GEN-LAST:event_btnDeleteEncounterActionPerformed

  private void btnEditEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditEncounterActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEncounterHistory.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        VitalSigns vs = (VitalSigns) tblEncounterHistory.getValueAt(selectedRow, 0);

        ViewVitalSign vvs = new ViewVitalSign(userProcessContainer, vs, Boolean.TRUE);
        userProcessContainer.add("EditVitalSign", vvs);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
  }//GEN-LAST:event_btnEditEncounterActionPerformed

  private void btnAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatients.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person = (Person) tblPatients.getValueAt(selectedRow, 0);
        Patient patient = person.getPatient();
        if (patient != null) {
            CreateVitalSign cvs = new CreateVitalSign(userProcessContainer, patient);
            userProcessContainer.add("cvsJPanel", cvs);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create"
                    + " Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
  }//GEN-LAST:event_btnAddVitalsActionPerformed

  private void btnViewEncounterDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewEncounterDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEncounterHistory.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        VitalSigns vs = (VitalSigns) tblEncounterHistory.getValueAt(selectedRow, 0);
        ViewVitalSign vvs = new ViewVitalSign(userProcessContainer, vs, Boolean.FALSE);
        userProcessContainer.add("ViewVitalSign", vvs);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
  }//GEN-LAST:event_btnViewEncounterDetailsActionPerformed

  private void btnViewEncountersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewEncountersActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatients.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person = (Person) tblPatients.getValueAt(selectedRow, 0);
        Patient patient = person.getPatient();
        if (patient != null) {
            populateEncountersTable(person);
        } else {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create "
                    + "Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
  }//GEN-LAST:event_btnViewEncountersActionPerformed

  private void btnRefreshPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshPatientsActionPerformed
        // TODO add your handling code here:
        txtCommSearch.setText("");
        populatePatientsTable(personDirectory.getPersonDirectory(), doctor);
  }//GEN-LAST:event_btnRefreshPatientsActionPerformed

  private void btnRefreshEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshEncounterActionPerformed
        // TODO add your handling code here:
        refreshEncounters();
  }//GEN-LAST:event_btnRefreshEncounterActionPerformed

  private void btnSearchAbnormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchAbnormalActionPerformed
        // TODO add your handling code here:
        if (cbAbnormal.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "No community selected!", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String comm = cbAbnormal.getSelectedItem().toString();
        populateAbnormalTable(personDirectory.getPersonDirectory(), comm);
  }//GEN-LAST:event_btnSearchAbnormalActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddVitals;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteEncounter;
    private javax.swing.JButton btnEditEncounter;
    private javax.swing.JButton btnRefreshEncounter;
    private javax.swing.JButton btnRefreshPatients;
    private javax.swing.JButton btnSearchAbnormal;
    private javax.swing.JButton btnSearchComm;
    private javax.swing.JButton btnViewEncounterDetails;
    private javax.swing.JButton btnViewEncounters;
    private javax.swing.JComboBox<String> cbAbnormal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblLanding;
    private javax.swing.JLabel lblLanding1;
    private javax.swing.JLabel lblLanding2;
    private javax.swing.JLabel lblLanding3;
    private javax.swing.JTable tblAbnormal;
    private javax.swing.JTable tblEncounterHistory;
    private javax.swing.JTable tblPatients;
    private javax.swing.JTextField txtCommSearch;
    // End of variables declaration//GEN-END:variables

    private void populatePatientsTable(ArrayList<Person> persons, String doctor) {
        DefaultTableModel model = (DefaultTableModel) tblPatients.getModel();
        model.setRowCount(0);
        if (persons.isEmpty()) {
            JOptionPane.
                    showMessageDialog(this, "No persons found! Please add a person to begin!",
                            "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (Person p : persons) {
            if (doctor.equals(p.getPatient().getDoctor().getFirstName())) {
                Object[] row = new Object[4];
                row[0] = p;
                row[1] = p.getAge();
                row[3] = p.getCommunity().getCommunityName();
                if (p.getPatient() != null) {
                    row[2] = p.getPatient().getPatientID();
                } else {
                    row[2] = "Patient not created!";
                }
                model.addRow(row);
            }
        }
    }

    private void populateEncountersTable(Person person) {
        DefaultTableModel model = (DefaultTableModel) tblEncounterHistory.getModel();
        model.setRowCount(0);
        if (person != null) {
            int age = person.getAge();

            ArrayList<VitalSigns> vitalSigns = person.getPatient().getVitalSignsHistory().getVitalsHistory();

            if (vitalSigns.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No vital signs found! Please"
                        + " add vital signs for the patient!", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            for (VitalSigns vs : vitalSigns) {
                Object[] row = new Object[2];
                row[0] = vs;
                row[1] = vitalsStatus(age, vs);
                model.addRow(row);
            }
        }
    }

    private void populateCommunities(ArrayList<Person> persons) {
        ArrayList<String> communityList = new ArrayList<>();
        for (Person p : persons) {

            System.out.println(p.getCommunity().getCommunityName());
            communityList.add(p.getCommunity().getCommunityName());
        }
        Set<String> uComm = new HashSet<String>(communityList);
        for (String s : uComm) {
            cbAbnormal.addItem(s);
        }
    }

    private void populateAbnormalTable(ArrayList<Person> persons, String community) {
        DefaultTableModel model = (DefaultTableModel) tblAbnormal.getModel();
        model.setRowCount(0);

        for (Person p : persons) {
            if (p != null) {
                if (!p.getCommunity().
                        getCommunityName().
                        equalsIgnoreCase(community)) {
                    continue;
                }
                int age = p.getAge();
                ArrayList<VitalSigns> vitalSigns = p.getPatient().
                        getVitalSignsHistory().
                        getVitalsHistory();
                if (vitalSigns.isEmpty()) {
                    continue;
                }

                String vStatus = vitalsStatus(age, vitalSigns.get(vitalSigns.size() - 1));
                if (vStatus.equalsIgnoreCase("Abnormal")) {
                    Object[] row = new Object[2];
                    row[0] = community;
                    row[1] = vStatus;
                    model.addRow(row);
                }
            }
        }
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No abnormal persons found!", "Info",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }

    private String vitalsStatus(int age, VitalSigns vs) {
        String status = "Normal";

        double spo2 = vs.getOxygenSaturation();
        double heartRate = vs.getHeartRate();
        double bloodPressure = vs.getBloodPressure();
        double weight = vs.getWeight();

        if (age >= 1 && age <= 3) {
            if ((spo2 < 98)
                    || (heartRate < 80 || heartRate > 130)
                    || (bloodPressure < 80 || bloodPressure > 110)
                    || (weight < 22 || weight > 31)) {
                status = "Abnormal";
            }
        }

        if (age >= 4 && age <= 5) {
            if ((spo2 < 90)
                    || (heartRate < 80 || heartRate > 120)
                    || (bloodPressure < 80 || bloodPressure > 110)
                    || (weight < 31 || weight > 40)) {
                status = "Abnormal";
            }
        }

        if (age >= 6 && age <= 12) {
            if ((spo2 < 95)
                    || (heartRate < 70 || heartRate > 110)
                    || (bloodPressure < 80 || bloodPressure > 120)
                    || (weight < 41 || weight > 92)) {
                status = "Abnormal";
            }
        }

        if (age >= 13) {
            if ((spo2 < 90)
                    || (heartRate < 55 || heartRate > 105)
                    || (bloodPressure < 110 || bloodPressure > 120)
                    || (weight < 110)) {
                status = "Abnormal";
            }
        }
        return status;
    }

    private void refreshEncounters() {
        int selectedRow = tblPatients.getSelectedRow();
        if (selectedRow < 0) {
            populateEncountersTable(null);
        } else {
            Person person = (Person) tblPatients.getValueAt(selectedRow, 0);
            Patient patient = person.getPatient();
            if (patient != null) {
                populateEncountersTable(person);
            } else {
                populateEncountersTable(null);
            }
        }
    }

    private boolean isLetter(String s) {
        char[] chArr = s.toCharArray();
        for (char c : chArr) {
            if (!Character.isLetter(c)) {
                return false;
            }
        }
        return true;
    }
}
